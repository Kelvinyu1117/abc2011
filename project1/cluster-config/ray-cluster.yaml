# An unique identifier for the head node and workers of this cluster.
cluster_name: test-cluster

min_workers: 1
max_workers: 6

# The autoscaler will scale up the cluster faster with higher upscaling speed.
# E.g., if the task requires adding more nodes then autoscaler will gradually
# scale up the cluster in chunks of upscaling_speed*currently_running_nodes.
# This number should be > 0.
upscaling_speed: 1.0

docker:
  image: rayproject/ray:latest-py310-cpu # can do gpu if it is needed ("rayproject/ray-ml:latest-gpu")
  container_name: "ray_ml_container"
  pull_before_run: True
  run_options:
    - --ulimit nofile=65536:65536
# Cloud-provider specific configuration.
provider:
  type: aws
  region: us-west-2
  # Availability zone(s), comma-separated, that nodes may be launched in.
  # Nodes will be launched in the first listed availability zone and will
  # be tried in the subsequent availability zones if launching fails.
  availability_zone: us-west-2a,us-west-2b
  # Whether to allow node reuse. If set to False, nodes will be terminated
  # instead of stopped.
  cache_stopped_nodes: True # If not present, the default is True.

# How Ray will authenticate with newly launched nodes.
auth:
  ssh_user: ubuntu

available_node_types:
  head_node: # master
    resources: {}
    node_config:
      InstanceType: m5.large
      # Default AMI for us-west-2.
      # Check https://github.com/ray-project/ray/blob/master/python/ray/autoscaler/_private/aws/config.py
      # for default images for other zones.
      ImageId: ami-0387d929287ab193e
      # You can provision additional disk space with a conf as follows
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 140
            VolumeType: gp3
      # Additional options in the boto docs.
  worker_node: # workers
    min_workers: 1
    max_workers: 5
    resources: {}
    node_config:
      InstanceType: m5.large
      ImageId: ami-0387d929287ab193e
      InstanceMarketOptions:
        MarketType: spot

head_node_type: head_node

idle_timeout_minutes: 5

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands: []

# List of shell commands to run to set up nodes.
setup_commands:
  []
  # Note: if you're developing Ray, you probably want to create a Docker image that
  # has your Ray repo pre-cloned. Then, you can replace the pip installs
  # below with a git checkout <your_sha> (and possibly a recompile).
  # To run the nightly version of ray (as opposed to the latest), either use a rayproject docker image
  # that has the "nightly" (e.g. "rayproject/ray-ml:nightly-gpu") or uncomment the following line:
  # - pip install -U "ray[default] @ https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-3.0.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl"

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

head_start_ray_commands:
  - ray stop
  - ray start --head --port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml --dashboard-host=0.0.0.0

worker_start_ray_commands:
  - ray stop
  - ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
